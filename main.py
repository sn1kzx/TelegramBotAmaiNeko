import telebot
import g4f
from telebot import types
import threading
import time

TELEGRAM_BOT_TOKEN = '7946963630:AAGygp6dxRM285VRmR6AHKua0myBsQ5QwVs'
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

providers = [prov for prov in g4f.Provider.__dict__.values() if callable(prov)]

chat_histories = {}
chat_styles = {}

DEFAULT_STYLE = (
    "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –≤–µ–∂–ª–∏–≤—ã–π –∏ –∫—Ä–∞—Ç–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. "
    "–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –∏ —é–º–æ—Ä, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."
)

# –ó–∞–¥–∞—ë–º chat_id, –≤ –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏–Ω–≥–∏
PING_CHAT_ID = 123456789  # <-- —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —á–∞—Ç ID

@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.InlineKeyboardMarkup(row_width=3)

    btn1 = types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", url="https://t.me/—Ç–≤–æ–π_–∫–∞–Ω–∞–ª")
    btn2 = types.InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/—Ç–≤–æ–π_—á–∞—Ç_–ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    btn3 = types.InlineKeyboardButton("üí∞ –î–æ–Ω–∞—Ç–∏–∫", url="https://t.me/—Å—Å—ã–ª–∫–∞_–Ω–∞_–¥–æ–Ω–∞—Ç")

    markup.add(btn1, btn2, btn3)

    text = ("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –¥—Ä—É–≥! üëã\n\n"
            "–Ø —Ç–≤–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π GPT-–±–æ—Ç ü§ñ\n"
            "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞–π –æ—Ç–≤–µ—Ç—ã –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ!\n\n"
            "–ù–∏–∂–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ–±—è:\n"
            "–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É:\n"
            "/style <—Ç–µ–∫—Å—Ç_—Å—Ç–∏–ª—è>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/style –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø–∏—Ä–∞—Ç —Å –∫—É—á–µ–π —ç–º–æ–¥–∑–∏ ‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è")
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.message_handler(commands=['style'])
def set_style(message):
    user_id = message.chat.id
    style_text = message.text[len('/style '):].strip()

    if not style_text:
        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å—Ç–∏–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /style")
        return

    chat_styles[user_id] = style_text
    bot.reply_to(message, f"‚úÖ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n\n{style_text}")

@bot.message_handler(func=lambda message: True)
def reply(message):
    user_id = message.chat.id
    question = message.text

    if user_id not in chat_histories:
        chat_histories[user_id] = []

    chat_histories[user_id].append({"role": "user", "content": question})

    # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(chat_histories[user_id]) > 20:
        chat_histories[user_id] = chat_histories[user_id][-20:]

    bot.send_chat_action(user_id, 'typing')
    thinking = bot.reply_to(message, "ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    style_text = chat_styles.get(user_id, DEFAULT_STYLE)
    system_message = {"role": "system", "content": style_text}

    for provider in providers:
        try:
            response = g4f.ChatCompletion.create(model="gpt-3.5-turbo",
                                                 provider=provider,
                                                 messages=[system_message] + chat_histories[user_id])

            reply_text = str(response)

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç –æ–± —É–ª—É—á—à–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
            if "I am still improving my command" in reply_text:
                reply_text = reply_text.split("I am still improving my command")[0].strip()

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
            reply_text = reply_text.replace('??', '').replace(' ?', '').strip()

            if "limit" in reply_text.lower():
                bot.edit_message_text(
                    chat_id=user_id,
                    message_id=thinking.message_id,
                    text="‚è≥ –ú–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.")
                return

            if len(reply_text) > 4000:
                reply_text = reply_text[:3990] + "..."

            chat_histories[user_id].append({
                "role": "assistant",
                "content": reply_text
            })

            bot.edit_message_text(chat_id=user_id,
                                  message_id=thinking.message_id,
                                  text=f"ü§ñ {reply_text}")
            return

        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider.__name__} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            continue

    bot.edit_message_text(chat_id=user_id,
                          message_id=thinking.message_id,
                          text="‚ö†Ô∏è –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

def ping_bot():
    while True:
        try:
            bot.send_message(PING_CHAT_ID, "‚è∞ –ü–∏–Ω–≥, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Å–ø–∞–ª!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ: {e}")
        time.sleep(300)  # –∂–¥–µ–º 5 –º–∏–Ω—É—Ç

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
    threading.Thread(target=ping_bot, daemon=True).start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()
